"""
Number theory functions.
"""
import pygraphviz as pgv


def collatz_sequence(n):
    """
    The Collatz sequence for n is a generated by iterating:

    a_n = (1/2) * a_n-1    if a_n-1 is even
    a_n = 3*a_n-1 + 1      if a_n-1 is odd

    ...a sequence which is conjectured to always wind up at 1.
    """
    s = []
    x = n
    while x>1:
        s.append(x)
        if x % 2 == 0:
            x = x//2
        else:
            x = 3*x + 1
    return s


for n in range(1,100):
    print(collatz_sequence(n))

print(max(len(collatz_sequence(n)) for n in range(1000)))


def collatz_graph(n, filename=None):
    """
    Use pygraphviz and Graphviz to visualize Collatz sequences for numbers
    up to n.
    """
    g = pgv.AGraph()
    g.add_node(1, fillcolor='#19a8ff30', style='filled')
    if n < 1: return g

    for x in range(2, n+1):
        a = x
        while a>1:
            if a % 2 == 0:
                b = a//2
                g.add_node(a, fillcolor='#19a8ff30', style='filled')
                g.add_edge(a,b, color='#19a8ff', dir='forward')
            else:
                b = 3*a + 1
                g.add_node(a, fillcolor='#e3423430', style='filled')
                g.add_edge(a,b, color='#e34234', dir='forward')
            a = b

    filename = filename or f'collatz_graph_{n}.png'

    g.layout(prog='dot')
    g.draw(filename)


# collatz_graph(100)
